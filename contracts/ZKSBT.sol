// SPDX-License-Identifier: MIT
pragma solidity ^0.8.18;

import "@masa-finance/masa-contracts-identity/contracts/tokens/MasaSBT.sol";

import "./IZKSBT.sol";

interface IVerifier {
    function verifyProof(
        uint[2] memory a,
        uint[2][2] memory b,
        uint[2] memory c,
        uint[6] memory input
    ) external view returns (bool);
}

/// @title ZKP SBT
/// @author Masa Finance
/// @notice Soulbound token implementing ZKP
abstract contract ZKSBT is IZKSBT, MasaSBT {
    /* ========== STATE VARIABLES =========================================== */

    IVerifier internal _verifier;

    // Struct to store the encrypted data with the public key of the owner of the SBT
    struct SBTData {
        bytes root; // root of the Merkle Tree's data without encryption, used to verify the data
        // encrypted data with the public key of the owner of the SBT
        bytes[] encryptedData;
    }

    // tokenId => SBTData
    mapping(uint256 => SBTData) internal sbtData;

    /* ========== INITIALIZE ================================================ */

    /* ========== RESTRICTED FUNCTIONS ====================================== */

    /* ========== MUTATIVE FUNCTIONS ======================================== */

    /* ========== VIEWS ===================================================== */

    /// @notice Returns the verifier smart contract
    /// @return The verifier smart contract
    function getVerifier() external view returns (IVerifier) {
        return _verifier;
    }

    /// @notice Returns the root of the Merkle Tree's data without encryption, used to verify the data
    /// @param tokenId The SBT ID
    /// @return The root of the Merkle Tree's data without encryption, used to verify the data
    function getRoot(
        uint256 tokenId
    ) public view override returns (bytes memory) {
        return sbtData[tokenId].root;
    }

    /// @notice Returns the encrypted data with the public key of the owner of the SBT
    /// @param tokenId The SBT ID
    /// @return The encrypted data with the public key of the owner of the SBT
    function getEncryptedData(
        uint256 tokenId
    ) external view override returns (bytes[] memory) {
        return sbtData[tokenId].encryptedData;
    }

    // @notice verifies the validity of the proof, and make further verifications on the public
    // input of the circuit
    // @param tokenId The SBT ID
    // @param proof Proof generated by the circuit
    // @param publicValues Public input of the circuit
    // @return True if the proof is valid, false otherwise
    function verifyProof(
        uint256 tokenId,
        uint[] memory proof,
        uint[] memory publicValues
    ) external view override returns (bool) {
        address owner = address(uint160(publicValues[3]));

        require(
            publicValues[0] ==
                0x0000000000000000000000000000000000000000000000000000000000000001,
            "The claim doesn't satisfy the query condition"
        );

        require(
            ownerOf(tokenId) == owner,
            "The SBT doesn't belong to the address that is trying to claim the loan"
        );

        bytes memory root = getRoot(tokenId);
        require(
            keccak256(abi.encodePacked(root)) ==
                keccak256(abi.encodePacked(publicValues[2])),
            "The root of the Merkle Tree's data doesn't match the root stored in the SBT"
        );

        // Convert the proof and the public values to the format expected by the verifier
        uint[2] memory a = [proof[0], proof[1]];
        uint[2][2] memory b = [[proof[2], proof[3]], [proof[4], proof[5]]];
        uint[2] memory c = [proof[6], proof[7]];
        uint[6] memory p = [
            publicValues[0],
            publicValues[1],
            publicValues[2],
            publicValues[3],
            publicValues[4],
            publicValues[5]
        ];

        // Verify the proof
        require(_verifier.verifyProof(a, b, c, p), "Proof verification failed");

        return true;
    }

    /* ========== PRIVATE FUNCTIONS ========================================= */

    /* ========== MODIFIERS ================================================= */

    /* ========== EVENTS ==================================================== */
}
